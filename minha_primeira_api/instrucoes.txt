
* Como iniciar um projeto php utilizando laravel
    Para criar um projeto utilzando laravel com php, utilizamos o composer para instalar automaticamente todas as dependências necessárias.

    Utilize o comando 
    composer create-project --prefer-dist laravel/laravel nome_do_projeto "5.7.*"

* Comando para iniciar o servidor
    php artisan serve

* No arquivo routes/api podemos definir as nossas rotas da api

* Criar uma migração 
    php artisan make:migration create_table_products --create=products

* Alterar as configurações do banco no arquivo .env
    DB_DATABASE=nomedobancodedados
    DB_USERNAME=nomedeusuario
    DB_PASSWORD=senha

* Crie o seu banco de dados com o nome informado acima

* No arquivo database/migration/migracaocriada insira as colunas que deseja inserir na sua tabela (no método up)
    Exemplo:
        $table->increments('id');
        $table->string('name');
        $table->float('price');
        $table->string('description');
        $table->string('slug');
        $table->timestamps();

* Execute o comando para fazer a migracao e adicionar a tabela ao banco
    php artisan migrate

* Criar uma rota no arquivo api.php
    Exemplo:
        Route::get('/products', function(){
            return Product::all();
        });
* Nesse momento irá dar um erro pois precisa criar um model, para corrigir será necessário executar o seguinte comando (isso irá cirar um arquivo dentro da pasta app chamado Product.php)
    php artisan make:model Product

* Editar o arquivo api.php na rota do produto acrescentar \App\ no return, ficará assim:
    return \App\Product::all();

* Crie um controller com o seguinte comando (o comando irá criar um arquivo ProductController dentro da pasta app/Http/Controllers/Api)
    php artisan make:controller Api/ProductController

* No arquivo app/Http/Controllers/Api/ProductControler.php
                <?php

                namespace App\Http\Controllers\Api;

                use App\Product;
                use Illuminate\Http\Request;
                use App\Http\Controllers\Controller;

                class ProductController extends Controller
                {
                    private $product;

                    public function __construct(Product $product)
                    {
                        $this->product = $product;
                    }

                    public function index(){
                        $products = $this->product->all();

                        return response()->json($products);
                    }
                }


* Altere a rota de Products no arquivo routes/api
                /// Products Route
                Route::namespace('Api')->prefix('products')->group(function(){
                    Route::get('/', 'ProductController@index');
                    Route::post('/', 'ProductController@save');
                });

* No código acima criamos uma nova rota post com o método save, porém devemos criar esse método pois ele não existe, no arquivo app/Http\Controllers/Api/ProductController.php
    public function save(Request $request)
    {
        $data = $request->all();
        $product = $this->product->create($data);

        return response()->json($product);
    }

* Agora devemos inserir os campos que são permitidos a inserção de dados, para isso no arquivo App/Product.php insira o código a seguir
                protected $fillable = [
                    'name', 'price', 'description', 'slug'
                ]


* Para criar um método de listar apenas um produto por id bastar criar o método no arquivo ProductController, e depois criar a rota no arquivo api

* Para criar um método de atualizar apenas um produto por id bastar criar o método no arquivo ProductController, e depois criar a rota no arquivo api



-----------------------------------------------------------------------------------------------------------------------------

Autenticação Básica

-Gerando um usuário fake
    php artisan make:seeder UsersTableSeeder

- No arquivo criado coloque o seguinte código
    public function run()
    {
        factory(\App\User::class, 1)->create(); //O número 1 é a qtd de usuários fakes que serão criados
    }

- No arquivo databaseseeder.php descomente o seguinte código
    $this->call(UsersTableSeeder::class);


- rode o comando a seguir para criar os usuarios fakes
    php artisan db:seed

- adicione no rota na api o código 
    ->middleware('auth.basic')


-----------------------------------------------------------------------------------------------------------------------------


***** Criar um produto através de factory e seeder *****

-Rode os comandos no terminal
    php artisan make:factory ProductFactory
    php artisan make:seeder ProductTableSeeder

- no arquivo criado ProductFactory
        $factory->define(\App\Product::class, function (Faker $faker) {
            return [
                'name' => $faker->name,
                'price' => $faker->randomFloat(2, 0, 8), //o primeiro númmero e o número de casas decimais e depois o tamanho mínimo e máximo do campo
                'description' => $faker->text,
                'slug' => $faker->slug
            ];
        });

- no arquivo criado ProductTableSeeder
        public function run()
        {
            factory(\App\Product::class, 30) -> create();
        }

- no arquivo databaseseeder adicione no método run
        $this->call(ProductTableSeeder::class);


- rode o comando php artisan db:seed para gerar os produtos

-----------------------------------------------------------------------------------------------------------------------------

* * * * *  Validações  * * * * *

- Rode o comando abaixo para criar uma request dentro da pasta app/Http/Requests
    php artisan make:request ProductRequest

- no arquivo criado ProductRequest
        <?php

        namespace App\Http\Requests;

        use Illuminate\Foundation\Http\FormRequest;

        class ProductRequest extends FormRequest
        {
            /**
            * Determine if the user is authorized to make this request.
            *
            * @return bool
            */
            public function authorize()
            {
                return true;
            }

            /**
            * Get the validation rules that apply to the request.
            *
            * @return array
            */
            public function rules()
            {
                return [
                    'name'          => 'required',
                    'price'         => 'required',
                    'description'   => 'required',
                    'slug'          => 'required'
                ];
            }
        }

- No arquivo ProductController onde definimos os nossos métodos das nossas rotas, no método desejado, onde ele recebia como parametro um request vamos alterar para ProductRequest como no exemplo abaixo
    Como era:    public function save(Request $request)
    Como ficou:  public function save(ProductRequest $request)